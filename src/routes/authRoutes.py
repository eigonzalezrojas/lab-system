from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required, current_user
from src.services.auth_services import authenticate_user, generate_password_hash, update_password
from src.services.email_service import send_email
from src.models import UserAccount, UserType
import time, random, string
from src import db

auth_bp = Blueprint('auth', __name__)


@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        rut = request.form['rut']
        password = request.form['password']
        user = authenticate_user(rut, password)

        if user:
            # Si el usuario usa una contrase침a temporal, redirigir al cambio de contrase침a
            if user.temporary_password and user.temporary_password == password:
                flash('Has ingresado con una contrase침a temporal. Por favor, c치mbiala.', 'warning')
                return redirect(url_for('auth.change_password'))

            # Iniciar sesi칩n con una contrase침a v치lida
            login_user(user)

            if user.is_admin():
                return redirect(url_for('home.home'))
            elif user.type == UserType.INTERNAL:
                return redirect(url_for('main.operador_interno_dashboard'))
            elif user.type == UserType.EXTERNAL:
                return redirect(url_for('main.operador_externo_dashboard'))

        flash('Rut y/o contrase침a inv치lida', 'danger')

    return render_template('login.html')


@auth_bp.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        rut = request.form.get('rut')
        if not rut:
            flash('Debe ingresar un RUT.', 'danger')
            return redirect(url_for('auth.forgot_password'))

        user = UserAccount.query.filter_by(rut=rut).first()
        if user:
            temp_password = generate_temporary_password(user)

            if temp_password:
                subject = "Contrase침a Temporal IQRN"
                body = f"""
                Estimado/a {user.first_name},

                Hemos recibido una solicitud para restablecer su contrase침a. Para acceder a su cuenta, utilice la siguiente contrase침a temporal:

                游댐 Contrase침a temporal: {temp_password}

                Por favor, inicie sesi칩n y cambie su contrase침a lo antes posible para garantizar la seguridad de su cuenta.

                Si usted no solicit칩 este cambio, por favor ignore este mensaje.

                Atentamente,  
                El equipo de soporte de IQRN
                """

                if send_email(subject, user.email, body):
                    flash('Una contrase침a fue enviada a su correo registrado', 'success')
                else:
                    flash('Hubo un error en el env칤o del correo.', 'danger')
            else:
                flash('No se pudo generar la contrase침a temporal.', 'danger')
        else:
            flash('El RUT ingresado no est치 registrado.', 'danger')

        return redirect(url_for('auth.login'))

    return render_template('forgot_password.html')


@auth_bp.route('/change_password', methods=['GET', 'POST'])
@login_required
def change_password():
    if request.method == 'POST':
        current_password = request.form.get('current_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')

        success, message = update_password(current_password, new_password, confirm_password)
        if success:
            flash(message, 'success')
            time.sleep(1)
            return redirect(url_for('auth.login'))
        else:
            flash(message, 'danger')

    return render_template('change_password.html')


@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('auth.login'))


def generate_temporary_password(user):
    """ Genera y hashea una contrase침a temporal usando werkzeug.security """

    # Generamos una contrase침a aleatoria de 10 caracteres
    temporary_password = ''.join(random.choices(string.ascii_letters + string.digits, k=10))

    if not temporary_password:
        return None

    # Hasheamos la contrase침a antes de guardarla en la base de datos
    hashed_temp_password = generate_password_hash(temporary_password)

    # Guardamos la contrase침a temporal hasheada en la base de datos
    user.temporary_password = hashed_temp_password
    db.session.commit()

    return temporary_password



def update_password(current_password, new_password, confirm_password):
    """ Actualiza la contrase침a del usuario, verificando la contrase침a actual """

    user = UserAccount.query.get_or_404(current_user.rut)

    # Verificar que la contrase침a actual sea correcta (contrase침a normal o temporal)
    if not user.check_password(current_password):
        return False, "La contrase침a actual es incorrecta."

    # Verificar que la nueva contrase침a y la confirmaci칩n coincidan
    if new_password != confirm_password:
        return False, "Las contrase침as no coinciden."

    # Guardar la nueva contrase침a y eliminar la contrase침a temporal
    user.set_password(new_password)
    user.temporary_password = None
    db.session.commit()

    return True, "Contrase침a actualizada exitosamente."
